// Generated code, do not modify. Run `build_runner build` to re-generate!
// @dart=2.12
// ignore_for_file: no_leading_underscores_for_library_prefixes

import 'package:web3dart/crypto.dart';
import 'package:web3dart/web3dart.dart' as _i1;
import 'dart:typed_data' as _i2;

final _contractAbi = _i1.ContractAbi.fromJson(
    '[{"inputs":[{"internalType":"address","name":"anEntryPoint","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"owner","type":"address"}],"name":"AddedOwner","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"approvedHash","type":"bytes32"},{"indexed":true,"internalType":"address","name":"owner","type":"address"}],"name":"ApproveHash","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"handler","type":"address"}],"name":"ChangedFallbackHandler","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"guard","type":"address"}],"name":"ChangedGuard","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"threshold","type":"uint256"}],"name":"ChangedThreshold","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"module","type":"address"}],"name":"DisabledModule","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"module","type":"address"}],"name":"EnabledModule","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"bytes32","name":"txHash","type":"bytes32"},{"indexed":false,"internalType":"uint256","name":"payment","type":"uint256"}],"name":"ExecutionFailure","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"module","type":"address"}],"name":"ExecutionFromModuleFailure","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"module","type":"address"}],"name":"ExecutionFromModuleSuccess","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"bytes32","name":"txHash","type":"bytes32"},{"indexed":false,"internalType":"uint256","name":"payment","type":"uint256"}],"name":"ExecutionSuccess","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"owner","type":"address"}],"name":"RemovedOwner","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"sender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"SafeReceived","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"initiator","type":"address"},{"indexed":false,"internalType":"address[]","name":"owners","type":"address[]"},{"indexed":false,"internalType":"uint256","name":"threshold","type":"uint256"},{"indexed":false,"internalType":"address","name":"initializer","type":"address"},{"indexed":false,"internalType":"address","name":"fallbackHandler","type":"address"}],"name":"SafeSetup","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"msgHash","type":"bytes32"}],"name":"SignMsg","type":"event"},{"stateMutability":"nonpayable","type":"fallback"},{"inputs":[],"name":"VERSION","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"uint256","name":"_threshold","type":"uint256"}],"name":"addOwnerWithThreshold","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"hashToApprove","type":"bytes32"}],"name":"approveHash","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"},{"internalType":"bytes32","name":"","type":"bytes32"}],"name":"approvedHashes","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_threshold","type":"uint256"}],"name":"changeThreshold","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"prevModule","type":"address"},{"internalType":"address","name":"module","type":"address"}],"name":"disableModule","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"domainSeparator","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"eip4337Fallback","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"module","type":"address"}],"name":"enableModule","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"},{"internalType":"enum Enum.Operation","name":"operation","type":"uint8"},{"internalType":"uint256","name":"safeTxGas","type":"uint256"},{"internalType":"uint256","name":"baseGas","type":"uint256"},{"internalType":"uint256","name":"gasPrice","type":"uint256"},{"internalType":"address","name":"gasToken","type":"address"},{"internalType":"address","name":"refundReceiver","type":"address"},{"internalType":"uint256","name":"_nonce","type":"uint256"}],"name":"encodeTransactionData","outputs":[{"internalType":"bytes","name":"","type":"bytes"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"entryPoint","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"},{"internalType":"enum Enum.Operation","name":"operation","type":"uint8"},{"internalType":"uint256","name":"safeTxGas","type":"uint256"},{"internalType":"uint256","name":"baseGas","type":"uint256"},{"internalType":"uint256","name":"gasPrice","type":"uint256"},{"internalType":"address","name":"gasToken","type":"address"},{"internalType":"address payable","name":"refundReceiver","type":"address"},{"internalType":"bytes","name":"signatures","type":"bytes"}],"name":"execTransaction","outputs":[{"internalType":"bool","name":"success","type":"bool"}],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"},{"internalType":"enum Enum.Operation","name":"operation","type":"uint8"}],"name":"execTransactionFromModule","outputs":[{"internalType":"bool","name":"success","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"},{"internalType":"enum Enum.Operation","name":"operation","type":"uint8"}],"name":"execTransactionFromModuleReturnData","outputs":[{"internalType":"bool","name":"success","type":"bool"},{"internalType":"bytes","name":"returnData","type":"bytes"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"getChainId","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"contract GnosisSafe","name":"safe","type":"address"}],"name":"getCurrentEIP4337Manager","outputs":[{"internalType":"address","name":"prev","type":"address"},{"internalType":"address","name":"manager","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"start","type":"address"},{"internalType":"uint256","name":"pageSize","type":"uint256"}],"name":"getModulesPaginated","outputs":[{"internalType":"address[]","name":"array","type":"address[]"},{"internalType":"address","name":"next","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getOwners","outputs":[{"internalType":"address[]","name":"","type":"address[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"offset","type":"uint256"},{"internalType":"uint256","name":"length","type":"uint256"}],"name":"getStorageAt","outputs":[{"internalType":"bytes","name":"","type":"bytes"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getThreshold","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"},{"internalType":"enum Enum.Operation","name":"operation","type":"uint8"},{"internalType":"uint256","name":"safeTxGas","type":"uint256"},{"internalType":"uint256","name":"baseGas","type":"uint256"},{"internalType":"uint256","name":"gasPrice","type":"uint256"},{"internalType":"address","name":"gasToken","type":"address"},{"internalType":"address","name":"refundReceiver","type":"address"},{"internalType":"uint256","name":"_nonce","type":"uint256"}],"name":"getTransactionHash","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"module","type":"address"}],"name":"isModuleEnabled","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"isOwner","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"nonce","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"prevOwner","type":"address"},{"internalType":"address","name":"owner","type":"address"},{"internalType":"uint256","name":"_threshold","type":"uint256"}],"name":"removeOwner","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"prevModule","type":"address"},{"internalType":"contract EIP4337Manager","name":"oldManager","type":"address"},{"internalType":"contract EIP4337Manager","name":"newManager","type":"address"}],"name":"replaceEIP4337Manager","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"},{"internalType":"enum Enum.Operation","name":"operation","type":"uint8"}],"name":"requiredTxGas","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"handler","type":"address"}],"name":"setFallbackHandler","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"guard","type":"address"}],"name":"setGuard","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address[]","name":"_owners","type":"address[]"},{"internalType":"uint256","name":"_threshold","type":"uint256"},{"internalType":"address","name":"to","type":"address"},{"internalType":"bytes","name":"data","type":"bytes"},{"internalType":"address","name":"fallbackHandler","type":"address"},{"internalType":"address","name":"paymentToken","type":"address"},{"internalType":"uint256","name":"payment","type":"uint256"},{"internalType":"address payable","name":"paymentReceiver","type":"address"}],"name":"setup","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"singleton","type":"address"},{"internalType":"contract EIP4337Manager","name":"manager","type":"address"},{"internalType":"address[]","name":"owners","type":"address[]"},{"internalType":"bytes","name":"EmptyBytes","type":"bytes"}],"name":"setupEIP4337","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"name":"signedMessages","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"targetContract","type":"address"},{"internalType":"bytes","name":"calldataPayload","type":"bytes"}],"name":"simulateAndRevert","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"prevOwner","type":"address"},{"internalType":"address","name":"oldOwner","type":"address"},{"internalType":"address","name":"newOwner","type":"address"}],"name":"swapOwner","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"contract GnosisSafe","name":"safe","type":"address"},{"internalType":"contract EIP4337Manager","name":"manager","type":"address"}],"name":"validateEip4337","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"components":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"uint256","name":"nonce","type":"uint256"},{"internalType":"bytes","name":"initCode","type":"bytes"},{"internalType":"bytes","name":"callData","type":"bytes"},{"internalType":"uint256","name":"callGas","type":"uint256"},{"internalType":"uint256","name":"verificationGas","type":"uint256"},{"internalType":"uint256","name":"preVerificationGas","type":"uint256"},{"internalType":"uint256","name":"maxFeePerGas","type":"uint256"},{"internalType":"uint256","name":"maxPriorityFeePerGas","type":"uint256"},{"internalType":"address","name":"paymaster","type":"address"},{"internalType":"bytes","name":"paymasterData","type":"bytes"},{"internalType":"bytes","name":"signature","type":"bytes"}],"internalType":"struct UserOperation","name":"userOp","type":"tuple"},{"internalType":"bytes32","name":"requestId","type":"bytes32"},{"internalType":"uint256","name":"missingWalletFunds","type":"uint256"}],"name":"validateUserOp","outputs":[],"stateMutability":"nonpayable","type":"function"},{"stateMutability":"payable","type":"receive"}]',
    'EIP4337Manager');

class EIP4337Manager extends _i1.GeneratedContract {

  static _i2.Uint8List byteCode = hexToBytes("0x60c06040523480156200001157600080fd5b506040516200520d3803806200520d8339810160408190526200003491620000a5565b60016004556001600160a01b03811660a0526040513090620000569062000097565b6001600160a01b039091168152602001604051809103906000f08015801562000083573d6000803e3d6000fd5b506001600160a01b031660805250620000d7565b6108eb806200492283390190565b600060208284031215620000b857600080fd5b81516001600160a01b0381168114620000d057600080fd5b9392505050565b60805160a05161481e62000104600039600081816105e80152612b930152600061050c015261481e6000f3fe6080604052600436106102295760003560e01c8063affed0e011610123578063e19a9dd9116100ab578063f08a03231161006f578063f08a03231461078d578063f698da25146107ad578063f8dc5dd9146107c2578063fcbac1f4146107e2578063ffa1ad741461080257610265565b8063e19a9dd9146106f8578063e318b52b14610718578063e75235b814610738578063e86637db1461074d578063efae6e061461076d57610265565b8063c4ca3a9c116100f2578063c4ca3a9c1461064a578063cc2f84521461066a578063d4d9bdcd14610698578063d8d11f78146106b8578063e009cfde146106d857610265565b8063affed0e0146105c0578063b0d691fe146105d6578063b4faba091461060a578063b63e800d1461062a57610265565b80635229073f116101b15780636a761202116101755780636a761202146104e757806370b8a01d146104fa5780637d83297414610546578063934f3a111461057e578063a0e67e2b1461059e57610265565b80635229073f1461041f5780635624b25b1461044d5780635ae6bd371461047a578063610b5925146104a7578063694e80c3146104c757610265565b80632f54bf6e116101f85780632f54bf6e146103825780633251a957146103a25780633408e470146103c257806345b1e0ca146103df578063468721a7146103ff57610265565b8063039b1728146102cb5780630d582f131461031057806312fb68e0146103325780632d9ad53d1461035257610265565b366102655760405134815233907f3d0ce9bfc3ed7d6862dbb28b2dea94561fe714a1b4d019aa8af39730d1ad7c3d9060200160405180910390a2005b34801561027157600080fd5b507f6c9a6c4a39284e37ed1cf53d337577d14212a4870fb976a4366c693b939918d580548061029c57005b36600080373360601b365260008060143601600080855af190503d6000803e806102c5573d6000fd5b503d6000f35b3480156102d757600080fd5b506102eb6102e6366004613762565b610833565b604080516001600160a01b039384168152929091166020830152015b60405180910390f35b34801561031c57600080fd5b5061033061032b36600461378f565b6109b2565b005b34801561033e57600080fd5b5061033061034d366004613870565b610b12565b34801561035e57600080fd5b5061037261036d366004613762565b610f7a565b6040519015158152602001610307565b34801561038e57600080fd5b5061037261039d366004613762565b610fb5565b3480156103ae57600080fd5b506103306103bd366004613969565b610fed565b3480156103ce57600080fd5b50465b604051908152602001610307565b3480156103eb57600080fd5b506103306103fa3660046139fd565b611135565b34801561040b57600080fd5b5061037261041a366004613a45565b6114ea565b34801561042b57600080fd5b5061043f61043a366004613a45565b6115c1565b604051610307929190613b06565b34801561045957600080fd5b5061046d610468366004613b21565b6115f7565b6040516103079190613b43565b34801561048657600080fd5b506103d1610495366004613b56565b60076020526000908152604090205481565b3480156104b357600080fd5b506103306104c2366004613762565b61167c565b3480156104d357600080fd5b506103306104e2366004613b56565b6117be565b6103726104f5366004613b6f565b611856565b34801561050657600080fd5b5061052e7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610307565b34801561055257600080fd5b506103d161056136600461378f565b600860209081526000928352604080842090915290825290205481565b34801561058a57600080fd5b50610330610599366004613c47565b611b9f565b3480156105aa57600080fd5b506105b3611be9565b6040516103079190613cf7565b3480156105cc57600080fd5b506103d160055481565b3480156105e257600080fd5b5061052e7f000000000000000000000000000000000000000000000000000000000000000081565b34801561061657600080fd5b50610330610625366004613d0a565b611cd9565b34801561063657600080fd5b50610330610645366004613d59565b611cfc565b34801561065657600080fd5b506103d1610665366004613e29565b611e1d565b34801561067657600080fd5b5061068a61068536600461378f565b611eb7565b604051610307929190613e99565b3480156106a457600080fd5b506103306106b3366004613b56565b611fb0565b3480156106c457600080fd5b506103d16106d3366004613ec3565b612045565b3480156106e457600080fd5b506103306106f33660046139fd565b612072565b34801561070457600080fd5b50610330610713366004613762565b6121a1565b34801561072457600080fd5b50610330610733366004613f83565b612206565b34801561074457600080fd5b506004546103d1565b34801561075957600080fd5b5061046d610768366004613ec3565b6123f5565b34801561077957600080fd5b50610330610788366004613f83565b6124ce565b34801561079957600080fd5b506103306107a8366004613762565b61292e565b3480156107b957600080fd5b506103d1612997565b3480156107ce57600080fd5b506103306107dd366004613fce565b6129ee565b3480156107ee57600080fd5b506103306107fd36600461400f565b612b61565b34801561080e57600080fd5b5061046d604051806040016040528060058152602001640312e332e360dc1b81525081565b604051636617c22960e11b8152600160048201819052606460248301529060009081906001600160a01b0385169063cc2f845290604401600060405180830381865afa158015610887573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526108af919081019061406d565b50905060005b81518110156109a55760008282815181106108d2576108d2614130565b602090810291909101810151604080516004815260248101825292830180516001600160e01b0316630af2b70960e21b1790525190925060009182916001600160a01b0385169161092291614146565b600060405180830381855afa9150503d806000811461095d576040519150601f19603f3d011682016040523d82523d6000602084013e610962565b606091505b5091509150811561098d57808060200190518101906109819190614162565b95505050505050915091565b5090945081905061099d81614195565b9150506108b5565b5060009485945092505050565b6109ba612e60565b6001600160a01b038216158015906109dc57506001600160a01b038216600114155b80156109f157506001600160a01b0382163014155b610a165760405162461bcd60e51b8152600401610a0d906141b0565b60405180910390fd5b6001600160a01b038281166000908152600260205260409020541615610a4e5760405162461bcd60e51b8152600401610a0d906141cf565b60026020527fe90b7bceb6e7df5418fb78d8ee546e97c83a08bbccc01a0644d599ccd2a7c2e080546001600160a01b038481166000818152604081208054939094166001600160a01b031993841617909355600183528354909116179091556003805491610abb83614195565b90915550506040516001600160a01b03831681527f9465fa0c962cc76958e6373a993326400c1c94f8be2fe3a952adfa7f60b2ea269060200160405180910390a18060045414610b0e57610b0e816117be565b5050565b610b1d816041612e99565b82511015610b555760405162461bcd60e51b8152602060048201526005602482015264047533032360dc1b6044820152606401610a0d565b6000808060008060005b86811015610f6e576041818102890160208101516040820151919092015160ff169550909350915083610d2c579193508391610b9c876041612e99565b821015610bd35760405162461bcd60e51b8152602060048201526005602482015264475330323160d81b6044820152606401610a0d565b8751610be0836020612ed2565b1115610c165760405162461bcd60e51b815260206004820152600560248201526423a998191960d91b6044820152606401610a0d565b602082890181015189519091610c39908390610c33908790612ed2565b90612ed2565b1115610c6f5760405162461bcd60e51b8152602060048201526005602482015264475330323360d81b6044820152606401610a0d565b6040516320c13b0b60e01b8082528a8501602001916001600160a01b038916906320c13b0b90610ca5908f9086906004016141ee565b602060405180830381865afa158015610cc2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ce69190614213565b6001600160e01b03191614610d255760405162461bcd60e51b815260206004820152600560248201526411d4cc0c8d60da1b6044820152606401610a0d565b5050610ed4565b8360ff1660011415610daf579193508391336001600160a01b0384161480610d7657506001600160a01b03851660009081526008602090815260408083208d845290915290205415155b610daa5760405162461bcd60e51b8152602060048201526005602482015264475330323560d81b6044820152606401610a0d565b610ed4565b601e8460ff161115610e74576040517f19457468657265756d205369676e6564204d6573736167653a0a3332000000006020820152603c81018b9052600190605c0160405160208183030381529060405280519060200120600486610e14919061423d565b6040805160008152602081018083529390935260ff90911690820152606081018590526080810184905260a0016020604051602081039080840390855afa158015610e63573d6000803e3d6000fd5b505050602060405103519450610ed4565b6040805160008152602081018083528c905260ff861691810191909152606081018490526080810183905260019060a0016020604051602081039080840390855afa158015610ec7573d6000803e3d6000fd5b5050506020604051035194505b856001600160a01b0316856001600160a01b0316118015610f0e57506001600160a01b038581166000908152600260205260409020541615155b8015610f2457506001600160a01b038516600114155b610f585760405162461bcd60e51b815260206004820152600560248201526423a998191b60d91b6044820152606401610a0d565b8495508080610f6690614195565b915050610b5f565b50505050505050505050565b600060016001600160a01b03831614801590610faf57506001600160a01b038281166000908152600160205260409020541615155b92915050565b60006001600160a01b038216600114801590610faf5750506001600160a01b0390811660009081526002602052604090205416151590565b6000856001600160a01b03166370b8a01d6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561102d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110519190614162565b90506000600190506110b788600088888560008a8a8a60008060006040516024016110859a999897969594939291906142c7565b60408051601f198184030181529190526020810180516001600160e01b031663b63e800d60e01b17905260015a612eee565b50611122876001600160a01b031663b0d691fe6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156110f9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061111d9190614162565b611684565b61112b82611684565b5050505050505050565b60408051604180825260808201909252600091602082018180368337019050509050601b60f81b8160408151811061116f5761116f614130565b60200101906001600160f81b031916908160001a905350600160f81b8160028151811061119e5761119e614130565b60200101906001600160f81b031916908160001a905350600160f81b816023815181106111cd576111cd614130565b60200101906001600160f81b031916908160001a90535060408051610180810182526001600160a01b038516815260006020808301829052835180820185528281528385015283518082018552828152606084015260808301829052620f424060a084015260c0830182905260e0830182905261010083018290526101208301829052835190810184528181526101408301526101608201849052825160018082528185019094529192909190816020015b6112f560405180610180016040528060006001600160a01b03168152602001600081526020016060815260200160608152602001600081526020016000815260200160008152602001600081526020016000815260200160006001600160a01b0316815260200160608152602001606081525090565b81526020019060019003908161127f579050509050818160008151811061131e5761131e614130565b60200260200101819052506000846001600160a01b031663b0d691fe6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611369573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061138d9190614162565b604051632815c17b60e01b81529091506001600160a01b03821690632815c17b906113be9085903390600401614339565b600060405180830381600087803b1580156113d857600080fd5b505af19250505080156113e9575060015b61148e573d808015611417576040519150601f19603f3d011682016040523d82523d6000602084013e61141c565b606091505b50600080604051602401611431929190614477565b60408051601f19818403018152919052602080820180516001600160e01b031662fa072b60e01b178152915190912082519183019190912014611488578060405162461bcd60e51b8152600401610a0d9190613b43565b506114e2565b60405162461bcd60e51b8152602060048201526024808201527f76616c6964617465456970343333373a2068616e646c654f7073206d7573742060448201526319985a5b60e21b6064820152608401610a0d565b505050505050565b6000336001148015906115145750336000908152600160205260409020546001600160a01b031615155b6115485760405162461bcd60e51b815260206004820152600560248201526411d4cc4c0d60da1b6044820152606401610a0d565b611555858585855a612eee565b9050801561158d5760405133907f6895c13664aa4f67288b25d7a21d7aaa34916e355fb9b6fae0a139a9085becb890600090a26115b9565b60405133907facd2c8702804128fdb0db2bb49f6d127dd0181c13fd45dbfe16de0930e2bd37590600090a25b949350505050565b600060606115d1868686866114ea565b915060405160203d0181016040523d81523d6000602083013e8091505094509492505050565b606060006116068360206144c6565b6001600160401b0381111561161d5761161d6137bb565b6040519080825280601f01601f191660200182016040528015611647576020820181803683370190505b50905060005b8381101561167457848101546020808302840101528061166c81614195565b91505061164d565b509392505050565b611684612e60565b6001600160a01b038116158015906116a657506001600160a01b038116600114155b6116da5760405162461bcd60e51b8152602060048201526005602482015264475331303160d81b6044820152606401610a0d565b6001600160a01b03818116600090815260016020526040902054161561172a5760405162461bcd60e51b815260206004820152600560248201526423a998981960d91b6044820152606401610a0d565b600160208181527fcc69885fda6bcc1a4ace058b4a62bf5e179ea78fd58a1ccd71c22cc9b688792f80546001600160a01b03858116600081815260408082208054949095166001600160a01b031994851617909455959095528254168417909155519182527fecdf3a3effea5783a3c4c2140e677577666428d44ed9d474a0b3a4c9943f844091015b60405180910390a150565b6117c6612e60565b6003548111156117e85760405162461bcd60e51b8152600401610a0d906144e5565b60018110156118215760405162461bcd60e51b815260206004820152600560248201526423a999181960d91b6044820152606401610a0d565b60048190556040518181527f610f7ff2b304ae8903c3de74c60c6ab1f7d6226b3f52c5161905bb5ad4039c93906020016117b3565b60008060006118708e8e8e8e8e8e8e8e8e8e6005546123f5565b60058054919250600061188283614195565b909155505080516020820120915061189b828286611b9f565b5060006118c67f4a204f620c8c5ccdca3fd54d003badd85ba500436a431f0cbda4f558c93c34c85490565b90506001600160a01b0381161561194c57806001600160a01b03166375f0bb528f8f8f8f8f8f8f8f8f8f8f336040518d63ffffffff1660e01b81526004016119199c9b9a9998979695949392919061453c565b600060405180830381600087803b15801561193357600080fd5b505af1158015611947573d6000803e3d6000fd5b505050505b61197861195b8a6109c46145c8565b603f6119688c60406144c6565b61197291906145e0565b90612f36565b611984906101f46145c8565b5a10156119bb5760405162461bcd60e51b8152602060048201526005602482015264047533031360dc1b6044820152606401610a0d565b60005a9050611a2c8f8f8f8f8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050508e8c600014611a19578e612eee565b6109c45a611a279190614602565b612eee565b9350611a395a8290612f4d565b90508380611a4657508915155b80611a5057508715155b611a845760405162461bcd60e51b8152602060048201526005602482015264475330313360d81b6044820152606401610a0d565b60008815611a9c57611a99828b8b8b8b612f68565b90505b8415611ae05760408051858152602081018390527f442e715f626346e8c54381002da614f62bee8d27386535b2521ec8540898556e910160405180910390a1611b1a565b60408051858152602081018390527f23428b18acfb3ea64b08dc0c1d296ea9c09702c09083ca5272e64d115b687d23910160405180910390a15b50506001600160a01b03811615611b8e57604051631264e26d60e31b81526004810183905283151560248201526001600160a01b03821690639327136890604401600060405180830381600087803b158015611b7557600080fd5b505af1158015611b89573d6000803e3d6000fd5b505050505b50509b9a5050505050505050505050565b60045480611bd75760405162461bcd60e51b8152602060048201526005602482015264475330303160d81b6044820152606401610a0d565b611be384848484610b12565b50505050565b606060006003546001600160401b03811115611c0757611c076137bb565b604051908082528060200260200182016040528015611c30578160200160208202803683370190505b506001600090815260026020527fe90b7bceb6e7df5418fb78d8ee546e97c83a08bbccc01a0644d599ccd2a7c2e054919250906001600160a01b03165b6001600160a01b038116600114611cd15780838381518110611c9157611c91614130565b6001600160a01b03928316602091820292909201810191909152918116600090815260029092526040909120541681611cc981614195565b925050611c6d565b509092915050565b600080825160208401855af480600052503d6020523d600060403e60403d016000fd5b611d3a8a8a808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152508c925061306e915050565b6001600160a01b03841615611d7157611d71847f6c9a6c4a39284e37ed1cf53d337577d14212a4870fb976a4366c693b939918d555565b611db18787878080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061325492505050565b8115611dc857611dc682600060018685612f68565b505b336001600160a01b03167f141df868a6331af528e38c83b7aa03edc19be66e37ae67f9285bf4f8e3c6a1a88b8b8b8b89604051611e09959493929190614619565b60405180910390a250505050505050505050565b6000805a9050611e66878787878080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525089925050505a612eee565b611e6f57600080fd5b60005a611e7c9083614602565b905080604051602001611e9191815260200190565b60408051601f198184030181529082905262461bcd60e51b8252610a0d91600401613b43565b60606000826001600160401b03811115611ed357611ed36137bb565b604051908082528060200260200182016040528015611efc578160200160208202803683370190505b506001600160a01b0380861660009081526001602052604081205492945091165b6001600160a01b03811615801590611f3f57506001600160a01b038116600114155b8015611f4a57508482105b15611fa25780848381518110611f6257611f62614130565b6001600160a01b03928316602091820292909201810191909152918116600090815260019092526040909120541681611f9a81614195565b925050611f1d565b908352919491935090915050565b336000908152600260205260409020546001600160a01b0316611ffd5760405162461bcd60e51b8152602060048201526005602482015264047533033360dc1b6044820152606401610a0d565b336000818152600860209081526040808320858452909152808220600190555183917ff2a0eb156472d1440255b0d7c1e19cc07115d1051fe605b0dce69acfec884d9c91a350565b600061205a8c8c8c8c8c8c8c8c8c8c8c6123f5565b8051906020012090509b9a5050505050505050505050565b61207a612e60565b6001600160a01b0381161580159061209c57506001600160a01b038116600114155b6120d05760405162461bcd60e51b8152602060048201526005602482015264475331303160d81b6044820152606401610a0d565b6001600160a01b038281166000908152600160205260409020548116908216146121245760405162461bcd60e51b8152602060048201526005602482015264475331303360d81b6044820152606401610a0d565b6001600160a01b038181166000818152600160209081526040808320805488871685528285208054919097166001600160a01b03199182161790965592849052825490941690915591519081527faab4fa2b463f581b2b32cb3b7e3b704b9ce37cc209b5fb4d77e593ace405427691015b60405180910390a15050565b6121a9612e60565b7f4a204f620c8c5ccdca3fd54d003badd85ba500436a431f0cbda4f558c93c34c88181556040516001600160a01b03831681527f1151116914515bc0891ff9047a6cb32cf902546f83066499bcf8ba33d2353fa290602001612195565b61220e612e60565b6001600160a01b0381161580159061223057506001600160a01b038116600114155b801561224557506001600160a01b0381163014155b6122615760405162461bcd60e51b8152600401610a0d906141b0565b6001600160a01b0381811660009081526002602052604090205416156122995760405162461bcd60e51b8152600401610a0d906141cf565b6001600160a01b038216158015906122bb57506001600160a01b038216600114155b6122d75760405162461bcd60e51b8152600401610a0d906141b0565b6001600160a01b0383811660009081526002602052604090205481169083161461232b5760405162461bcd60e51b8152602060048201526005602482015264475332303560d81b6044820152606401610a0d565b6001600160a01b038281166000818152600260209081526040808320805487871680865283862080549289166001600160a01b0319938416179055968a1685528285208054821690971790965592849052825490941690915591519081527ff8d49fc529812e9a7c5c50e69c20f0dccc0db8fa95c98bc58cc9a4f1c1299eaf910160405180910390a16040516001600160a01b03821681527f9465fa0c962cc76958e6373a993326400c1c94f8be2fe3a952adfa7f60b2ea269060200160405180910390a1505050565b606060007fbb8310d486368db6bd6f849402fdd73ad53d316b5a4b2644ad6efe0f941286d860001b8d8d8d8d60405161242f929190614654565b604051908190038120612455949392918e908e908e908e908e908e908e90602001614664565b60408051601f1981840301815291905280516020909101209050601960f81b600160f81b612481612997565b6040516001600160f81b031993841660208201529290911660218301526022820152604281018290526062016040516020818303038152906040529150509b9a5050505050505050505050565b60003090506000836001600160a01b03166370b8a01d6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612513573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125379190614162565b604051632d9ad53d60e01b81526001600160a01b03808316600483015291925090831690632d9ad53d90602401602060405180830381865afa158015612581573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125a591906146d3565b6126095760405162461bcd60e51b815260206004820152602f60248201527f7265706c616365454950343333374d616e616765723a206f6c644d616e61676560448201526e72206973206e6f742061637469766560881b6064820152608401610a0d565b816001600160a01b031663e009cfde82866001600160a01b031663b0d691fe6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612657573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061267b9190614162565b6040516001600160e01b031960e085901b1681526001600160a01b03928316600482015291166024820152604401600060405180830381600087803b1580156126c357600080fd5b505af11580156126d7573d6000803e3d6000fd5b5050604051637004e7ef60e11b81526001600160a01b03888116600483015284811660248301528516925063e009cfde9150604401600060405180830381600087803b15801561272657600080fd5b505af115801561273a573d6000803e3d6000fd5b505050506000836001600160a01b03166370b8a01d6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561277e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127a29190614162565b9050826001600160a01b031663610b5925856001600160a01b031663b0d691fe6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156127f1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128159190614162565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401600060405180830381600087803b15801561285657600080fd5b505af115801561286a573d6000803e3d6000fd5b505060405163610b592560e01b81526001600160a01b0384811660048301528616925063610b59259150602401600060405180830381600087803b1580156128b157600080fd5b505af11580156128c5573d6000803e3d6000fd5b505060405163f08a032360e01b81526001600160a01b0384811660048301528616925063f08a03239150602401600060405180830381600087803b15801561290c57600080fd5b505af1158015612920573d6000803e3d6000fd5b505050506114e28385611135565b612936612e60565b61295e817f6c9a6c4a39284e37ed1cf53d337577d14212a4870fb976a4366c693b939918d555565b6040516001600160a01b03821681527f5ac6c46c93c8d0e53714ba3b53db3e7c046da994313d7ed0d192028bc7c228b0906020016117b3565b60007f47e79534a245952e8b16893a336b85a3d9ea9fa8c573f3d803afb92a794692184660408051602081019390935282015230606082015260800160405160208183030381529060405280519060200120905090565b6129f6612e60565b806001600354612a069190614602565b1015612a245760405162461bcd60e51b8152600401610a0d906144e5565b6001600160a01b03821615801590612a4657506001600160a01b038216600114155b612a625760405162461bcd60e51b8152600401610a0d906141b0565b6001600160a01b03838116600090815260026020526040902054811690831614612ab65760405162461bcd60e51b8152602060048201526005602482015264475332303560d81b6044820152606401610a0d565b6001600160a01b03828116600081815260026020526040808220805488861684529183208054929095166001600160a01b03199283161790945591815282549091169091556003805491612b09836146f5565b90915550506040516001600160a01b03831681527ff8d49fc529812e9a7c5c50e69c20f0dccc0db8fa95c98bc58cc9a4f1c1299eaf9060200160405180910390a18060045414612b5c57612b5c816117be565b505050565b60008036612b70601482614602565b612b7b92829061470c565b612b8491614736565b60601c90506001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168114612c015760405162461bcd60e51b815260206004820152601b60248201527f77616c6c65743a206e6f742066726f6d20656e747279706f696e7400000000006044820152606401610a0d565b306000612c5b856040517f19457468657265756d205369676e6564204d6573736167653a0a3332000000006020820152603c8101829052600090605c01604051602081830303815290604052805190602001209050919050565b90506000612cad612c7061016089018961476b565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250869392505061334e9050565b9050600454600114612d015760405162461bcd60e51b815260206004820152601860248201527f77616c6c65743a206f6e6c79207468726573686f6c64203100000000000000006044820152606401610a0d565b6040516317aa5fb760e11b81526001600160a01b038281166004830152841690632f54bf6e90602401602060405180830381865afa158015612d47573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d6b91906146d3565b612d875760405162461bcd60e51b8152600401610a0d906147b1565b612d94604088018861476b565b15159050612dfa57600580546020890135916000612db183614195565b9190505514612dfa5760405162461bcd60e51b815260206004820152601560248201527477616c6c65743a20696e76616c6964206e6f6e636560581b6044820152606401610a0d565b8415612e57576000846001600160a01b03168660405160006040518083038185875af1925050503d8060008114612e4d576040519150601f19603f3d011682016040523d82523d6000602084013e612e52565b606091505b505050505b50505050505050565b333014612e975760405162461bcd60e51b8152602060048201526005602482015264475330333160d81b6044820152606401610a0d565b565b600082612ea857506000610faf565b6000612eb483856144c6565b905082612ec185836145e0565b14612ecb57600080fd5b9392505050565b600080612edf83856145c8565b905083811015612ecb57600080fd5b60006001836001811115612f0457612f04614504565b1415612f1d576000808551602087018986f49050612f2d565b600080855160208701888a87f190505b95945050505050565b600081831015612f465781612ecb565b5090919050565b600082821115612f5c57600080fd5b60006115b98385614602565b6000806001600160a01b03831615612f805782612f82565b325b90506001600160a01b03841661301557612fb43a8610612fa2573a612fa4565b855b612fae8989612ed2565b90612e99565b6040519092506001600160a01b0382169083156108fc029084906000818181858888f193505050506130105760405162461bcd60e51b8152602060048201526005602482015264475330313160d81b6044820152606401610a0d565b613064565b61302385612fae8989612ed2565b915061303084828461336a565b6130645760405162461bcd60e51b815260206004820152600560248201526423a998189960d91b6044820152606401610a0d565b5095945050505050565b600454156130a65760405162461bcd60e51b8152602060048201526005602482015264047533230360dc1b6044820152606401610a0d565b81518111156130c75760405162461bcd60e51b8152600401610a0d906144e5565b60018110156131005760405162461bcd60e51b815260206004820152600560248201526423a999181960d91b6044820152606401610a0d565b600160005b835181101561322157600084828151811061312257613122614130565b6020026020010151905060006001600160a01b0316816001600160a01b03161415801561315957506001600160a01b038116600114155b801561316e57506001600160a01b0381163014155b801561318c5750806001600160a01b0316836001600160a01b031614155b6131a85760405162461bcd60e51b8152600401610a0d906141b0565b6001600160a01b0381811660009081526002602052604090205416156131e05760405162461bcd60e51b8152600401610a0d906141cf565b6001600160a01b03928316600090815260026020526040902080546001600160a01b031916938216939093179092558061321981614195565b915050613105565b506001600160a01b0316600090815260026020526040902080546001600160a01b03191660011790559051600355600455565b600160008190526020527fcc69885fda6bcc1a4ace058b4a62bf5e179ea78fd58a1ccd71c22cc9b688792f546001600160a01b0316156132be5760405162461bcd60e51b8152602060048201526005602482015264047533130360dc1b6044820152606401610a0d565b6001600081905260208190527fcc69885fda6bcc1a4ace058b4a62bf5e179ea78fd58a1ccd71c22cc9b688792f80546001600160a01b03191690911790556001600160a01b03821615610b0e5761331a8260008360015a612eee565b610b0e5760405162461bcd60e51b8152602060048201526005602482015264047533030360dc1b6044820152606401610a0d565b600080600061335d85856133f9565b9150915061167481613469565b604080516001600160a01b03841660248201526044808201849052825180830390910181526064909101909152602080820180516001600160e01b031663a9059cbb60e01b1781528251600093929184919082896127105a03f13d80156133dc57602081146133e457600093506133ef565b8193506133ef565b600051158215171593505b5050509392505050565b6000808251604114156134305760208301516040840151606085015160001a61342487828585613627565b94509450505050613462565b82516040141561345a576020830151604084015161344f868383613714565b935093505050613462565b506000905060025b9250929050565b600081600481111561347d5761347d614504565b14156134865750565b600181600481111561349a5761349a614504565b14156134e85760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e617475726500000000000000006044820152606401610a0d565b60028160048111156134fc576134fc614504565b141561354a5760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606401610a0d565b600381600481111561355e5761355e614504565b14156135b75760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b6064820152608401610a0d565b60048160048111156135cb576135cb614504565b14156136245760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604482015261756560f01b6064820152608401610a0d565b50565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a083111561365e575060009050600361370b565b8460ff16601b1415801561367657508460ff16601c14155b15613687575060009050600461370b565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa1580156136db573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166137045760006001925092505061370b565b9150600090505b94509492505050565b6000806001600160ff1b0383168161373160ff86901c601b6145c8565b905061373f87828885613627565b935093505050935093915050565b6001600160a01b038116811461362457600080fd5b60006020828403121561377457600080fd5b8135612ecb8161374d565b803561378a8161374d565b919050565b600080604083850312156137a257600080fd5b82356137ad8161374d565b946020939093013593505050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b03811182821017156137f9576137f96137bb565b604052919050565b600082601f83011261381257600080fd5b81356001600160401b0381111561382b5761382b6137bb565b61383e601f8201601f19166020016137d1565b81815284602083860101111561385357600080fd5b816020850160208301376000918101602001919091529392505050565b6000806000806080858703121561388657600080fd5b8435935060208501356001600160401b03808211156138a457600080fd5b6138b088838901613801565b945060408701359150808211156138c657600080fd5b506138d387828801613801565b949793965093946060013593505050565b60008083601f8401126138f657600080fd5b5081356001600160401b0381111561390d57600080fd5b6020830191508360208260051b850101111561346257600080fd5b60008083601f84011261393a57600080fd5b5081356001600160401b0381111561395157600080fd5b60208301915083602082850101111561346257600080fd5b6000806000806000806080878903121561398257600080fd5b863561398d8161374d565b9550602087013561399d8161374d565b945060408701356001600160401b03808211156139b957600080fd5b6139c58a838b016138e4565b909650945060608901359150808211156139de57600080fd5b506139eb89828a01613928565b979a9699509497509295939492505050565b60008060408385031215613a1057600080fd5b8235613a1b8161374d565b91506020830135613a2b8161374d565b809150509250929050565b80356002811061378a57600080fd5b60008060008060808587031215613a5b57600080fd5b8435613a668161374d565b93506020850135925060408501356001600160401b03811115613a8857600080fd5b613a9487828801613801565b925050613aa360608601613a36565b905092959194509250565b60005b83811015613ac9578181015183820152602001613ab1565b83811115611be35750506000910152565b60008151808452613af2816020860160208601613aae565b601f01601f19169290920160200192915050565b82151581526040602082015260006115b96040830184613ada565b60008060408385031215613b3457600080fd5b50508035926020909101359150565b602081526000612ecb6020830184613ada565b600060208284031215613b6857600080fd5b5035919050565b60008060008060008060008060008060006101408c8e031215613b9157600080fd5b613b9a8c61377f565b9a5060208c013599506001600160401b038060408e01351115613bbc57600080fd5b613bcc8e60408f01358f01613928565b909a509850613bdd60608e01613a36565b975060808d0135965060a08d0135955060c08d01359450613c0060e08e0161377f565b9350613c0f6101008e0161377f565b9250806101208e01351115613c2357600080fd5b50613c358d6101208e01358e01613801565b90509295989b509295989b9093969950565b600080600060608486031215613c5c57600080fd5b8335925060208401356001600160401b0380821115613c7a57600080fd5b613c8687838801613801565b93506040860135915080821115613c9c57600080fd5b50613ca986828701613801565b9150509250925092565b600081518084526020808501945080840160005b83811015613cec5781516001600160a01b031687529582019590820190600101613cc7565b509495945050505050565b602081526000612ecb6020830184613cb3565b60008060408385031215613d1d57600080fd5b8235613d288161374d565b915060208301356001600160401b03811115613d4357600080fd5b613d4f85828601613801565b9150509250929050565b6000806000806000806000806000806101008b8d031215613d7957600080fd5b8a356001600160401b0380821115613d9057600080fd5b613d9c8e838f016138e4565b909c509a5060208d0135995060408d01359150613db88261374d565b90975060608c01359080821115613dce57600080fd5b50613ddb8d828e01613928565b90975095505060808b0135613def8161374d565b935060a08b0135613dff8161374d565b925060c08b0135915060e08b0135613e168161374d565b809150509295989b9194979a5092959850565b600080600080600060808688031215613e4157600080fd5b8535613e4c8161374d565b94506020860135935060408601356001600160401b03811115613e6e57600080fd5b613e7a88828901613928565b9094509250613e8d905060608701613a36565b90509295509295909350565b604081526000613eac6040830185613cb3565b905060018060a01b03831660208301529392505050565b60008060008060008060008060008060006101408c8e031215613ee557600080fd5b8b35613ef08161374d565b9a5060208c0135995060408c01356001600160401b03811115613f1257600080fd5b613f1e8e828f01613928565b909a509850613f31905060608d01613a36565b965060808c0135955060a08c0135945060c08c0135935060e08c0135613f568161374d565b92506101008c0135613f678161374d565b809250506101208c013590509295989b509295989b9093969950565b600080600060608486031215613f9857600080fd5b8335613fa38161374d565b92506020840135613fb38161374d565b91506040840135613fc38161374d565b809150509250925092565b600080600060608486031215613fe357600080fd5b8335613fee8161374d565b92506020840135613ffe8161374d565b929592945050506040919091013590565b60008060006060848603121561402457600080fd5b83356001600160401b0381111561403a57600080fd5b8401610180818703121561404d57600080fd5b95602085013595506040909401359392505050565b805161378a8161374d565b6000806040838503121561408057600080fd5b82516001600160401b038082111561409757600080fd5b818501915085601f8301126140ab57600080fd5b81516020828211156140bf576140bf6137bb565b8160051b92506140d08184016137d1565b82815292840181019281810190898511156140ea57600080fd5b948201945b8486101561411457855193506141048461374d565b83825294820194908201906140ef565b96506141239050878201614062565b9450505050509250929050565b634e487b7160e01b600052603260045260246000fd5b60008251614158818460208701613aae565b9190910192915050565b60006020828403121561417457600080fd5b8151612ecb8161374d565b634e487b7160e01b600052601160045260246000fd5b60006000198214156141a9576141a961417f565b5060010190565b602080825260059082015264475332303360d81b604082015260600190565b60208082526005908201526411d4cc8c0d60da1b604082015260600190565b6040815260006142016040830185613ada565b8281036020840152612f2d8185613ada565b60006020828403121561422557600080fd5b81516001600160e01b031981168114612ecb57600080fd5b600060ff821660ff8416808210156142575761425761417f565b90039392505050565b8183526000602080850194508260005b85811015613cec5781356142838161374d565b6001600160a01b031687529582019590820190600101614270565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b60006101008083526142dc8184018d8f614260565b602084018c90526001600160a01b038b811660408601528482036060860152909150614309828a8c61429e565b978116608085015295861660a0840152505060ff9290921660c083015290911660e0909101529695505050505050565b60006040808301818452808651808352606092508286019150828160051b8701016020808a0160005b8481101561445157898403605f19018652815180516001600160a01b03168552610180848201518587015289820151818b8801526143a282880182613ada565b915050888201518682038a8801526143ba8282613ada565b6080848101519089015260a0808501519089015260c0808501519089015260e080850151908901526101008085015190890152610120808501516001600160a01b03169089015261014080850151898303828b0152919350915061441e8382613ada565b92505050610160808301519250868203818801525061443d8183613ada565b978501979550505090820190600101614362565b505081965061446a8189018a6001600160a01b03169052565b5050505050509392505050565b60ff831681526001600160a01b03821660208201526060604082018190526017908201527677616c6c65743a2077726f6e67207369676e617475726560481b6080820152600060a082016115b9565b60008160001904831182151516156144e0576144e061417f565b500290565b602080825260059082015264475332303160d81b604082015260600190565b634e487b7160e01b600052602160045260246000fd5b6002811061453857634e487b7160e01b600052602160045260246000fd5b9052565b600060018060a01b03808f1683528d6020840152610160604084015261456761016084018d8f61429e565b614574606085018d61451a565b8a60808501528960a08501528860c085015281881660e08501528187166101008501528381036101208501526145aa8187613ada565b925050808416610140840152509d9c50505050505050505050505050565b600082198211156145db576145db61417f565b500190565b6000826145fd57634e487b7160e01b600052601260045260246000fd5b500490565b6000828210156146145761461461417f565b500390565b60808152600061462d608083018789614260565b6020830195909552506001600160a01b039283166040820152911660609091015292915050565b8183823760009101908152919050565b8b81526001600160a01b038b81166020830152604082018b9052606082018a9052610160820190614698608084018b61451a565b60a083019890985260c082019690965260e0810194909452918516610100840152909316610120820152610140019190915295945050505050565b6000602082840312156146e557600080fd5b81518015158114612ecb57600080fd5b6000816147045761470461417f565b506000190190565b6000808585111561471c57600080fd5b8386111561472957600080fd5b5050820193919092039150565b6bffffffffffffffffffffffff1981358181169160148510156147635780818660140360031b1b83161692505b505092915050565b6000808335601e1984360301811261478257600080fd5b8301803591506001600160401b0382111561479c57600080fd5b60200191503681900382131561346257600080fd5b602081526000610faf60208301601781527677616c6c65743a2077726f6e67207369676e617475726560481b60208201526040019056fea2646970667358221220aefc361b416fbab6a06a26ae89b8aa881a2cb45f511806513f7a35ca1b8689ce64736f6c634300080c003360a060405234801561001057600080fd5b506040516108eb3803806108eb83398101604081905261002f91610040565b6001600160a01b0316608052610070565b60006020828403121561005257600080fd5b81516001600160a01b038116811461006957600080fd5b9392505050565b60805161085961009260003960008181610116015261028601526108596000f3fe608060405234801561001057600080fd5b50600436106100925760003560e01c8063a3f4df7e11610066578063a3f4df7e14610150578063bc197c8114610199578063f23a6e61146101bb578063fcbac1f4146101db578063ffa1ad74146101ee57600080fd5b806223de291461009757806301ffc9a7146100b1578063150b7a02146100d95780632bcadc2414610111575b600080fd5b6100af6100a536600461037c565b5050505050505050565b005b6100c46100bf366004610427565b610212565b60405190151581526020015b60405180910390f35b6100f86100e7366004610458565b630a85bd0160e11b95945050505050565b6040516001600160e01b031990911681526020016100d0565b6101387f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016100d0565b61018c6040518060400160405280601881526020017f44656661756c742043616c6c6261636b2048616e646c6572000000000000000081525081565b6040516100d091906104f7565b6100f86101a736600461056f565b63bc197c8160e01b98975050505050505050565b6100f86101c9366004610609565b63f23a6e6160e01b9695505050505050565b6100af6101e9366004610681565b610264565b61018c604051806040016040528060058152602001640312e302e360dc1b81525081565b60006001600160e01b03198216630271189760e51b148061024357506001600160e01b03198216630a85bd0160e11b145b8061025e57506001600160e01b031982166301ffc9a760e01b145b92915050565b604051635229073f60e01b8152339060009081908390635229073f906102b7907f0000000000000000000000000000000000000000000000000000000000000000908590819036906001906004016106d5565b6000604051808303816000875af11580156102d6573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526102fe919081019061075b565b915091508161030f57805160208201fd5b505050505050565b80356001600160a01b038116811461032e57600080fd5b919050565b60008083601f84011261034557600080fd5b50813567ffffffffffffffff81111561035d57600080fd5b60208301915083602082850101111561037557600080fd5b9250929050565b60008060008060008060008060c0898b03121561039857600080fd5b6103a189610317565b97506103af60208a01610317565b96506103bd60408a01610317565b955060608901359450608089013567ffffffffffffffff808211156103e157600080fd5b6103ed8c838d01610333565b909650945060a08b013591508082111561040657600080fd5b506104138b828c01610333565b999c989b5096995094979396929594505050565b60006020828403121561043957600080fd5b81356001600160e01b03198116811461045157600080fd5b9392505050565b60008060008060006080868803121561047057600080fd5b61047986610317565b945061048760208701610317565b935060408601359250606086013567ffffffffffffffff8111156104aa57600080fd5b6104b688828901610333565b969995985093965092949392505050565b60005b838110156104e25781810151838201526020016104ca565b838111156104f1576000848401525b50505050565b60208152600082518060208401526105168160408501602087016104c7565b601f01601f19169190910160400192915050565b60008083601f84011261053c57600080fd5b50813567ffffffffffffffff81111561055457600080fd5b6020830191508360208260051b850101111561037557600080fd5b60008060008060008060008060a0898b03121561058b57600080fd5b61059489610317565b97506105a260208a01610317565b9650604089013567ffffffffffffffff808211156105bf57600080fd5b6105cb8c838d0161052a565b909850965060608b01359150808211156105e457600080fd5b6105f08c838d0161052a565b909650945060808b013591508082111561040657600080fd5b60008060008060008060a0878903121561062257600080fd5b61062b87610317565b955061063960208801610317565b94506040870135935060608701359250608087013567ffffffffffffffff81111561066357600080fd5b61066f89828a01610333565b979a9699509497509295939492505050565b60008060006060848603121561069657600080fd5b833567ffffffffffffffff8111156106ad57600080fd5b840161018081870312156106c057600080fd5b95602085013595506040909401359392505050565b6001600160a01b0386168152602081018590526080604082018190528101839052828460a0830137600060a08483010152600060a0601f19601f86011683010190506002831061073557634e487b7160e01b600052602160045260246000fd5b8260608301529695505050505050565b634e487b7160e01b600052604160045260246000fd5b6000806040838503121561076e57600080fd5b8251801515811461077e57600080fd5b602084015190925067ffffffffffffffff8082111561079c57600080fd5b818501915085601f8301126107b057600080fd5b8151818111156107c2576107c2610745565b604051601f8201601f19908116603f011681019083821181831017156107ea576107ea610745565b8160405282815288602084870101111561080357600080fd5b6108148360208301602088016104c7565b8095505050505050925092905056fea26469706673582212203d1a13f2da1e5c7b54c36a169484af1d6c7a230e6bb5ecf1aee949b03001e84f64736f6c634300080c0033");

  EIP4337Manager(
      {required _i1.EthereumAddress address,
      required _i1.Web3Client client,
      int? chainId})
      : super(_i1.DeployedContract(_contractAbi, address), client, chainId);

  /// The optional [atBlock] parameter can be used to view historical data. When
  /// set, the function will be evaluated in the specified block. By default, the
  /// latest on-chain block will be used.
  Future<String> VERSION({_i1.BlockNum? atBlock}) async {
    final function = self.abi.functions[2];
    assert(checkSignature(function, 'ffa1ad74'));
    final params = [];
    final response = await read(function, params, atBlock);
    return (response[0] as String);
  }

  /// The optional [transaction] parameter can be used to override parameters
  /// like the gas price, nonce and max gas. The `data` and `to` fields will be
  /// set by the contract.
  Future<String> addOwnerWithThreshold(
      _i1.EthereumAddress owner, BigInt _threshold,
      {required _i1.Credentials credentials,
      _i1.Transaction? transaction}) async {
    final function = self.abi.functions[3];
    assert(checkSignature(function, '0d582f13'));
    final params = [owner, _threshold];
    return write(credentials, transaction, function, params);
  }

  /// The optional [transaction] parameter can be used to override parameters
  /// like the gas price, nonce and max gas. The `data` and `to` fields will be
  /// set by the contract.
  Future<String> approveHash(_i2.Uint8List hashToApprove,
      {required _i1.Credentials credentials,
      _i1.Transaction? transaction}) async {
    final function = self.abi.functions[4];
    assert(checkSignature(function, 'd4d9bdcd'));
    final params = [hashToApprove];
    return write(credentials, transaction, function, params);
  }

  /// The optional [atBlock] parameter can be used to view historical data. When
  /// set, the function will be evaluated in the specified block. By default, the
  /// latest on-chain block will be used.
  Future<BigInt> approvedHashes(
      _i1.EthereumAddress $param3, _i2.Uint8List $param4,
      {_i1.BlockNum? atBlock}) async {
    final function = self.abi.functions[5];
    assert(checkSignature(function, '7d832974'));
    final params = [$param3, $param4];
    final response = await read(function, params, atBlock);
    return (response[0] as BigInt);
  }

  /// The optional [transaction] parameter can be used to override parameters
  /// like the gas price, nonce and max gas. The `data` and `to` fields will be
  /// set by the contract.
  Future<String> changeThreshold(BigInt _threshold,
      {required _i1.Credentials credentials,
      _i1.Transaction? transaction}) async {
    final function = self.abi.functions[6];
    assert(checkSignature(function, '694e80c3'));
    final params = [_threshold];
    return write(credentials, transaction, function, params);
  }

  /// The optional [transaction] parameter can be used to override parameters
  /// like the gas price, nonce and max gas. The `data` and `to` fields will be
  /// set by the contract.
  Future<String> disableModule(
      _i1.EthereumAddress prevModule, _i1.EthereumAddress module,
      {required _i1.Credentials credentials,
      _i1.Transaction? transaction}) async {
    final function = self.abi.functions[7];
    assert(checkSignature(function, 'e009cfde'));
    final params = [prevModule, module];
    return write(credentials, transaction, function, params);
  }

  /// The optional [atBlock] parameter can be used to view historical data. When
  /// set, the function will be evaluated in the specified block. By default, the
  /// latest on-chain block will be used.
  Future<_i2.Uint8List> domainSeparator({_i1.BlockNum? atBlock}) async {
    final function = self.abi.functions[8];
    assert(checkSignature(function, 'f698da25'));
    final params = [];
    final response = await read(function, params, atBlock);
    return (response[0] as _i2.Uint8List);
  }

  /// The optional [atBlock] parameter can be used to view historical data. When
  /// set, the function will be evaluated in the specified block. By default, the
  /// latest on-chain block will be used.
  Future<_i1.EthereumAddress> eip4337Fallback({_i1.BlockNum? atBlock}) async {
    final function = self.abi.functions[9];
    assert(checkSignature(function, '70b8a01d'));
    final params = [];
    final response = await read(function, params, atBlock);
    return (response[0] as _i1.EthereumAddress);
  }

  /// The optional [transaction] parameter can be used to override parameters
  /// like the gas price, nonce and max gas. The `data` and `to` fields will be
  /// set by the contract.
  Future<String> enableModule(_i1.EthereumAddress module,
      {required _i1.Credentials credentials,
      _i1.Transaction? transaction}) async {
    final function = self.abi.functions[10];
    assert(checkSignature(function, '610b5925'));
    final params = [module];
    return write(credentials, transaction, function, params);
  }

  /// The optional [atBlock] parameter can be used to view historical data. When
  /// set, the function will be evaluated in the specified block. By default, the
  /// latest on-chain block will be used.
  Future<_i2.Uint8List> encodeTransactionData(
      _i1.EthereumAddress to,
      BigInt value,
      _i2.Uint8List data,
      BigInt operation,
      BigInt safeTxGas,
      BigInt baseGas,
      BigInt gasPrice,
      _i1.EthereumAddress gasToken,
      _i1.EthereumAddress refundReceiver,
      BigInt _nonce,
      {_i1.BlockNum? atBlock}) async {
    final function = self.abi.functions[11];
    assert(checkSignature(function, 'e86637db'));
    final params = [
      to,
      value,
      data,
      operation,
      safeTxGas,
      baseGas,
      gasPrice,
      gasToken,
      refundReceiver,
      _nonce
    ];
    final response = await read(function, params, atBlock);
    return (response[0] as _i2.Uint8List);
  }

  /// The optional [atBlock] parameter can be used to view historical data. When
  /// set, the function will be evaluated in the specified block. By default, the
  /// latest on-chain block will be used.
  Future<_i1.EthereumAddress> entryPoint({_i1.BlockNum? atBlock}) async {
    final function = self.abi.functions[12];
    assert(checkSignature(function, 'b0d691fe'));
    final params = [];
    final response = await read(function, params, atBlock);
    return (response[0] as _i1.EthereumAddress);
  }

  /// The optional [transaction] parameter can be used to override parameters
  /// like the gas price, nonce and max gas. The `data` and `to` fields will be
  /// set by the contract.
  Future<String> execTransaction(
      _i1.EthereumAddress to,
      BigInt value,
      _i2.Uint8List data,
      BigInt operation,
      BigInt safeTxGas,
      BigInt baseGas,
      BigInt gasPrice,
      _i1.EthereumAddress gasToken,
      _i1.EthereumAddress refundReceiver,
      _i2.Uint8List signatures,
      {required _i1.Credentials credentials,
      _i1.Transaction? transaction}) async {
    final function = self.abi.functions[13];
    assert(checkSignature(function, '6a761202'));
    final params = [
      to,
      value,
      data,
      operation,
      safeTxGas,
      baseGas,
      gasPrice,
      gasToken,
      refundReceiver,
      signatures
    ];
    return write(credentials, transaction, function, params);
  }

  /// The optional [transaction] parameter can be used to override parameters
  /// like the gas price, nonce and max gas. The `data` and `to` fields will be
  /// set by the contract.
  Future<String> execTransactionFromModule(_i1.EthereumAddress to, BigInt value,
      _i2.Uint8List data, BigInt operation,
      {required _i1.Credentials credentials,
      _i1.Transaction? transaction}) async {
    final function = self.abi.functions[14];
    assert(checkSignature(function, '468721a7'));
    final params = [to, value, data, operation];
    return write(credentials, transaction, function, params);
  }

  /// The optional [transaction] parameter can be used to override parameters
  /// like the gas price, nonce and max gas. The `data` and `to` fields will be
  /// set by the contract.
  Future<String> execTransactionFromModuleReturnData(_i1.EthereumAddress to,
      BigInt value, _i2.Uint8List data, BigInt operation,
      {required _i1.Credentials credentials,
      _i1.Transaction? transaction}) async {
    final function = self.abi.functions[15];
    assert(checkSignature(function, '5229073f'));
    final params = [to, value, data, operation];
    return write(credentials, transaction, function, params);
  }

  /// The optional [atBlock] parameter can be used to view historical data. When
  /// set, the function will be evaluated in the specified block. By default, the
  /// latest on-chain block will be used.
  Future<BigInt> getChainId({_i1.BlockNum? atBlock}) async {
    final function = self.abi.functions[16];
    assert(checkSignature(function, '3408e470'));
    final params = [];
    final response = await read(function, params, atBlock);
    return (response[0] as BigInt);
  }

  /// The optional [atBlock] parameter can be used to view historical data. When
  /// set, the function will be evaluated in the specified block. By default, the
  /// latest on-chain block will be used.
  Future<GetCurrentEIP4337Manager> getCurrentEIP4337Manager(
      _i1.EthereumAddress safe,
      {_i1.BlockNum? atBlock}) async {
    final function = self.abi.functions[17];
    assert(checkSignature(function, '039b1728'));
    final params = [safe];
    final response = await read(function, params, atBlock);
    return GetCurrentEIP4337Manager(response);
  }

  /// The optional [atBlock] parameter can be used to view historical data. When
  /// set, the function will be evaluated in the specified block. By default, the
  /// latest on-chain block will be used.
  Future<GetModulesPaginated> getModulesPaginated(
      _i1.EthereumAddress start, BigInt pageSize,
      {_i1.BlockNum? atBlock}) async {
    final function = self.abi.functions[18];
    assert(checkSignature(function, 'cc2f8452'));
    final params = [start, pageSize];
    final response = await read(function, params, atBlock);
    return GetModulesPaginated(response);
  }

  /// The optional [atBlock] parameter can be used to view historical data. When
  /// set, the function will be evaluated in the specified block. By default, the
  /// latest on-chain block will be used.
  Future<List<_i1.EthereumAddress>> getOwners({_i1.BlockNum? atBlock}) async {
    final function = self.abi.functions[19];
    assert(checkSignature(function, 'a0e67e2b'));
    final params = [];
    final response = await read(function, params, atBlock);
    return (response[0] as List<dynamic>).cast<_i1.EthereumAddress>();
  }

  /// The optional [atBlock] parameter can be used to view historical data. When
  /// set, the function will be evaluated in the specified block. By default, the
  /// latest on-chain block will be used.
  Future<_i2.Uint8List> getStorageAt(BigInt offset, BigInt length,
      {_i1.BlockNum? atBlock}) async {
    final function = self.abi.functions[20];
    assert(checkSignature(function, '5624b25b'));
    final params = [offset, length];
    final response = await read(function, params, atBlock);
    return (response[0] as _i2.Uint8List);
  }

  /// The optional [atBlock] parameter can be used to view historical data. When
  /// set, the function will be evaluated in the specified block. By default, the
  /// latest on-chain block will be used.
  Future<BigInt> getThreshold({_i1.BlockNum? atBlock}) async {
    final function = self.abi.functions[21];
    assert(checkSignature(function, 'e75235b8'));
    final params = [];
    final response = await read(function, params, atBlock);
    return (response[0] as BigInt);
  }

  /// The optional [atBlock] parameter can be used to view historical data. When
  /// set, the function will be evaluated in the specified block. By default, the
  /// latest on-chain block will be used.
  Future<_i2.Uint8List> getTransactionHash(
      _i1.EthereumAddress to,
      BigInt value,
      _i2.Uint8List data,
      BigInt operation,
      BigInt safeTxGas,
      BigInt baseGas,
      BigInt gasPrice,
      _i1.EthereumAddress gasToken,
      _i1.EthereumAddress refundReceiver,
      BigInt _nonce,
      {_i1.BlockNum? atBlock}) async {
    final function = self.abi.functions[22];
    assert(checkSignature(function, 'd8d11f78'));
    final params = [
      to,
      value,
      data,
      operation,
      safeTxGas,
      baseGas,
      gasPrice,
      gasToken,
      refundReceiver,
      _nonce
    ];
    final response = await read(function, params, atBlock);
    return (response[0] as _i2.Uint8List);
  }

  /// The optional [atBlock] parameter can be used to view historical data. When
  /// set, the function will be evaluated in the specified block. By default, the
  /// latest on-chain block will be used.
  Future<bool> isModuleEnabled(_i1.EthereumAddress module,
      {_i1.BlockNum? atBlock}) async {
    final function = self.abi.functions[23];
    assert(checkSignature(function, '2d9ad53d'));
    final params = [module];
    final response = await read(function, params, atBlock);
    return (response[0] as bool);
  }

  /// The optional [atBlock] parameter can be used to view historical data. When
  /// set, the function will be evaluated in the specified block. By default, the
  /// latest on-chain block will be used.
  Future<bool> isOwner(_i1.EthereumAddress owner,
      {_i1.BlockNum? atBlock}) async {
    final function = self.abi.functions[24];
    assert(checkSignature(function, '2f54bf6e'));
    final params = [owner];
    final response = await read(function, params, atBlock);
    return (response[0] as bool);
  }

  /// The optional [atBlock] parameter can be used to view historical data. When
  /// set, the function will be evaluated in the specified block. By default, the
  /// latest on-chain block will be used.
  Future<BigInt> nonce({_i1.BlockNum? atBlock}) async {
    final function = self.abi.functions[25];
    assert(checkSignature(function, 'affed0e0'));
    final params = [];
    final response = await read(function, params, atBlock);
    return (response[0] as BigInt);
  }

  /// The optional [transaction] parameter can be used to override parameters
  /// like the gas price, nonce and max gas. The `data` and `to` fields will be
  /// set by the contract.
  Future<String> removeOwner(_i1.EthereumAddress prevOwner,
      _i1.EthereumAddress owner, BigInt _threshold,
      {required _i1.Credentials credentials,
      _i1.Transaction? transaction}) async {
    final function = self.abi.functions[26];
    assert(checkSignature(function, 'f8dc5dd9'));
    final params = [prevOwner, owner, _threshold];
    return write(credentials, transaction, function, params);
  }

  /// The optional [transaction] parameter can be used to override parameters
  /// like the gas price, nonce and max gas. The `data` and `to` fields will be
  /// set by the contract.
  Future<String> replaceEIP4337Manager(_i1.EthereumAddress prevModule,
      _i1.EthereumAddress oldManager, _i1.EthereumAddress newManager,
      {required _i1.Credentials credentials,
      _i1.Transaction? transaction}) async {
    final function = self.abi.functions[27];
    assert(checkSignature(function, 'efae6e06'));
    final params = [prevModule, oldManager, newManager];
    return write(credentials, transaction, function, params);
  }

  /// The optional [transaction] parameter can be used to override parameters
  /// like the gas price, nonce and max gas. The `data` and `to` fields will be
  /// set by the contract.
  Future<String> requiredTxGas(_i1.EthereumAddress to, BigInt value,
      _i2.Uint8List data, BigInt operation,
      {required _i1.Credentials credentials,
      _i1.Transaction? transaction}) async {
    final function = self.abi.functions[28];
    assert(checkSignature(function, 'c4ca3a9c'));
    final params = [to, value, data, operation];
    return write(credentials, transaction, function, params);
  }

  /// The optional [transaction] parameter can be used to override parameters
  /// like the gas price, nonce and max gas. The `data` and `to` fields will be
  /// set by the contract.
  Future<String> setFallbackHandler(_i1.EthereumAddress handler,
      {required _i1.Credentials credentials,
      _i1.Transaction? transaction}) async {
    final function = self.abi.functions[29];
    assert(checkSignature(function, 'f08a0323'));
    final params = [handler];
    return write(credentials, transaction, function, params);
  }

  /// The optional [transaction] parameter can be used to override parameters
  /// like the gas price, nonce and max gas. The `data` and `to` fields will be
  /// set by the contract.
  Future<String> setGuard(_i1.EthereumAddress guard,
      {required _i1.Credentials credentials,
      _i1.Transaction? transaction}) async {
    final function = self.abi.functions[30];
    assert(checkSignature(function, 'e19a9dd9'));
    final params = [guard];
    return write(credentials, transaction, function, params);
  }

  /// The optional [transaction] parameter can be used to override parameters
  /// like the gas price, nonce and max gas. The `data` and `to` fields will be
  /// set by the contract.
  Future<String> setup(
      List<_i1.EthereumAddress> _owners,
      BigInt _threshold,
      _i1.EthereumAddress to,
      _i2.Uint8List data,
      _i1.EthereumAddress fallbackHandler,
      _i1.EthereumAddress paymentToken,
      BigInt payment,
      _i1.EthereumAddress paymentReceiver,
      {required _i1.Credentials credentials,
      _i1.Transaction? transaction}) async {
    final function = self.abi.functions[31];
    assert(checkSignature(function, 'b63e800d'));
    final params = [
      _owners,
      _threshold,
      to,
      data,
      fallbackHandler,
      paymentToken,
      payment,
      paymentReceiver
    ];
    return write(credentials, transaction, function, params);
  }

  /// The optional [transaction] parameter can be used to override parameters
  /// like the gas price, nonce and max gas. The `data` and `to` fields will be
  /// set by the contract.
  Future<String> setupEIP4337(
      _i1.EthereumAddress singleton,
      _i1.EthereumAddress manager,
      List<_i1.EthereumAddress> owners,
      _i2.Uint8List EmptyBytes,
      {required _i1.Credentials credentials,
      _i1.Transaction? transaction}) async {
    final function = self.abi.functions[32];
    assert(checkSignature(function, '3251a957'));
    final params = [singleton, manager, owners, EmptyBytes];
    return write(credentials, transaction, function, params);
  }

  /// The optional [atBlock] parameter can be used to view historical data. When
  /// set, the function will be evaluated in the specified block. By default, the
  /// latest on-chain block will be used.
  Future<BigInt> signedMessages(_i2.Uint8List $param78,
      {_i1.BlockNum? atBlock}) async {
    final function = self.abi.functions[33];
    assert(checkSignature(function, '5ae6bd37'));
    final params = [$param78];
    final response = await read(function, params, atBlock);
    return (response[0] as BigInt);
  }

  /// The optional [transaction] parameter can be used to override parameters
  /// like the gas price, nonce and max gas. The `data` and `to` fields will be
  /// set by the contract.
  Future<String> simulateAndRevert(
      _i1.EthereumAddress targetContract, _i2.Uint8List calldataPayload,
      {required _i1.Credentials credentials,
      _i1.Transaction? transaction}) async {
    final function = self.abi.functions[34];
    assert(checkSignature(function, 'b4faba09'));
    final params = [targetContract, calldataPayload];
    return write(credentials, transaction, function, params);
  }

  /// The optional [transaction] parameter can be used to override parameters
  /// like the gas price, nonce and max gas. The `data` and `to` fields will be
  /// set by the contract.
  Future<String> swapOwner(_i1.EthereumAddress prevOwner,
      _i1.EthereumAddress oldOwner, _i1.EthereumAddress newOwner,
      {required _i1.Credentials credentials,
      _i1.Transaction? transaction}) async {
    final function = self.abi.functions[35];
    assert(checkSignature(function, 'e318b52b'));
    final params = [prevOwner, oldOwner, newOwner];
    return write(credentials, transaction, function, params);
  }

  /// The optional [transaction] parameter can be used to override parameters
  /// like the gas price, nonce and max gas. The `data` and `to` fields will be
  /// set by the contract.
  Future<String> validateEip4337(
      _i1.EthereumAddress safe, _i1.EthereumAddress manager,
      {required _i1.Credentials credentials,
      _i1.Transaction? transaction}) async {
    final function = self.abi.functions[36];
    assert(checkSignature(function, '45b1e0ca'));
    final params = [safe, manager];
    return write(credentials, transaction, function, params);
  }

  /// The optional [transaction] parameter can be used to override parameters
  /// like the gas price, nonce and max gas. The `data` and `to` fields will be
  /// set by the contract.
  Future<String> validateUserOp(
      dynamic userOp, _i2.Uint8List requestId, BigInt missingWalletFunds,
      {required _i1.Credentials credentials,
      _i1.Transaction? transaction}) async {
    final function = self.abi.functions[37];
    assert(checkSignature(function, 'fcbac1f4'));
    final params = [userOp, requestId, missingWalletFunds];
    return write(credentials, transaction, function, params);
  }

  /// Returns a live stream of all AddedOwner events emitted by this contract.
  Stream<AddedOwner> addedOwnerEvents(
      {_i1.BlockNum? fromBlock, _i1.BlockNum? toBlock}) {
    final event = self.event('AddedOwner');
    final filter = _i1.FilterOptions.events(
        contract: self, event: event, fromBlock: fromBlock, toBlock: toBlock);
    return client.events(filter).map((_i1.FilterEvent result) {
      final decoded = event.decodeResults(result.topics!, result.data!);
      return AddedOwner(decoded);
    });
  }

  /// Returns a live stream of all ApproveHash events emitted by this contract.
  Stream<ApproveHash> approveHashEvents(
      {_i1.BlockNum? fromBlock, _i1.BlockNum? toBlock}) {
    final event = self.event('ApproveHash');
    final filter = _i1.FilterOptions.events(
        contract: self, event: event, fromBlock: fromBlock, toBlock: toBlock);
    return client.events(filter).map((_i1.FilterEvent result) {
      final decoded = event.decodeResults(result.topics!, result.data!);
      return ApproveHash(decoded);
    });
  }

  /// Returns a live stream of all ChangedFallbackHandler events emitted by this contract.
  Stream<ChangedFallbackHandler> changedFallbackHandlerEvents(
      {_i1.BlockNum? fromBlock, _i1.BlockNum? toBlock}) {
    final event = self.event('ChangedFallbackHandler');
    final filter = _i1.FilterOptions.events(
        contract: self, event: event, fromBlock: fromBlock, toBlock: toBlock);
    return client.events(filter).map((_i1.FilterEvent result) {
      final decoded = event.decodeResults(result.topics!, result.data!);
      return ChangedFallbackHandler(decoded);
    });
  }

  /// Returns a live stream of all ChangedGuard events emitted by this contract.
  Stream<ChangedGuard> changedGuardEvents(
      {_i1.BlockNum? fromBlock, _i1.BlockNum? toBlock}) {
    final event = self.event('ChangedGuard');
    final filter = _i1.FilterOptions.events(
        contract: self, event: event, fromBlock: fromBlock, toBlock: toBlock);
    return client.events(filter).map((_i1.FilterEvent result) {
      final decoded = event.decodeResults(result.topics!, result.data!);
      return ChangedGuard(decoded);
    });
  }

  /// Returns a live stream of all ChangedThreshold events emitted by this contract.
  Stream<ChangedThreshold> changedThresholdEvents(
      {_i1.BlockNum? fromBlock, _i1.BlockNum? toBlock}) {
    final event = self.event('ChangedThreshold');
    final filter = _i1.FilterOptions.events(
        contract: self, event: event, fromBlock: fromBlock, toBlock: toBlock);
    return client.events(filter).map((_i1.FilterEvent result) {
      final decoded = event.decodeResults(result.topics!, result.data!);
      return ChangedThreshold(decoded);
    });
  }

  /// Returns a live stream of all DisabledModule events emitted by this contract.
  Stream<DisabledModule> disabledModuleEvents(
      {_i1.BlockNum? fromBlock, _i1.BlockNum? toBlock}) {
    final event = self.event('DisabledModule');
    final filter = _i1.FilterOptions.events(
        contract: self, event: event, fromBlock: fromBlock, toBlock: toBlock);
    return client.events(filter).map((_i1.FilterEvent result) {
      final decoded = event.decodeResults(result.topics!, result.data!);
      return DisabledModule(decoded);
    });
  }

  /// Returns a live stream of all EnabledModule events emitted by this contract.
  Stream<EnabledModule> enabledModuleEvents(
      {_i1.BlockNum? fromBlock, _i1.BlockNum? toBlock}) {
    final event = self.event('EnabledModule');
    final filter = _i1.FilterOptions.events(
        contract: self, event: event, fromBlock: fromBlock, toBlock: toBlock);
    return client.events(filter).map((_i1.FilterEvent result) {
      final decoded = event.decodeResults(result.topics!, result.data!);
      return EnabledModule(decoded);
    });
  }

  /// Returns a live stream of all ExecutionFailure events emitted by this contract.
  Stream<ExecutionFailure> executionFailureEvents(
      {_i1.BlockNum? fromBlock, _i1.BlockNum? toBlock}) {
    final event = self.event('ExecutionFailure');
    final filter = _i1.FilterOptions.events(
        contract: self, event: event, fromBlock: fromBlock, toBlock: toBlock);
    return client.events(filter).map((_i1.FilterEvent result) {
      final decoded = event.decodeResults(result.topics!, result.data!);
      return ExecutionFailure(decoded);
    });
  }

  /// Returns a live stream of all ExecutionFromModuleFailure events emitted by this contract.
  Stream<ExecutionFromModuleFailure> executionFromModuleFailureEvents(
      {_i1.BlockNum? fromBlock, _i1.BlockNum? toBlock}) {
    final event = self.event('ExecutionFromModuleFailure');
    final filter = _i1.FilterOptions.events(
        contract: self, event: event, fromBlock: fromBlock, toBlock: toBlock);
    return client.events(filter).map((_i1.FilterEvent result) {
      final decoded = event.decodeResults(result.topics!, result.data!);
      return ExecutionFromModuleFailure(decoded);
    });
  }

  /// Returns a live stream of all ExecutionFromModuleSuccess events emitted by this contract.
  Stream<ExecutionFromModuleSuccess> executionFromModuleSuccessEvents(
      {_i1.BlockNum? fromBlock, _i1.BlockNum? toBlock}) {
    final event = self.event('ExecutionFromModuleSuccess');
    final filter = _i1.FilterOptions.events(
        contract: self, event: event, fromBlock: fromBlock, toBlock: toBlock);
    return client.events(filter).map((_i1.FilterEvent result) {
      final decoded = event.decodeResults(result.topics!, result.data!);
      return ExecutionFromModuleSuccess(decoded);
    });
  }

  /// Returns a live stream of all ExecutionSuccess events emitted by this contract.
  Stream<ExecutionSuccess> executionSuccessEvents(
      {_i1.BlockNum? fromBlock, _i1.BlockNum? toBlock}) {
    final event = self.event('ExecutionSuccess');
    final filter = _i1.FilterOptions.events(
        contract: self, event: event, fromBlock: fromBlock, toBlock: toBlock);
    return client.events(filter).map((_i1.FilterEvent result) {
      final decoded = event.decodeResults(result.topics!, result.data!);
      return ExecutionSuccess(decoded);
    });
  }

  /// Returns a live stream of all RemovedOwner events emitted by this contract.
  Stream<RemovedOwner> removedOwnerEvents(
      {_i1.BlockNum? fromBlock, _i1.BlockNum? toBlock}) {
    final event = self.event('RemovedOwner');
    final filter = _i1.FilterOptions.events(
        contract: self, event: event, fromBlock: fromBlock, toBlock: toBlock);
    return client.events(filter).map((_i1.FilterEvent result) {
      final decoded = event.decodeResults(result.topics!, result.data!);
      return RemovedOwner(decoded);
    });
  }

  /// Returns a live stream of all SafeReceived events emitted by this contract.
  Stream<SafeReceived> safeReceivedEvents(
      {_i1.BlockNum? fromBlock, _i1.BlockNum? toBlock}) {
    final event = self.event('SafeReceived');
    final filter = _i1.FilterOptions.events(
        contract: self, event: event, fromBlock: fromBlock, toBlock: toBlock);
    return client.events(filter).map((_i1.FilterEvent result) {
      final decoded = event.decodeResults(result.topics!, result.data!);
      return SafeReceived(decoded);
    });
  }

  /// Returns a live stream of all SafeSetup events emitted by this contract.
  Stream<SafeSetup> safeSetupEvents(
      {_i1.BlockNum? fromBlock, _i1.BlockNum? toBlock}) {
    final event = self.event('SafeSetup');
    final filter = _i1.FilterOptions.events(
        contract: self, event: event, fromBlock: fromBlock, toBlock: toBlock);
    return client.events(filter).map((_i1.FilterEvent result) {
      final decoded = event.decodeResults(result.topics!, result.data!);
      return SafeSetup(decoded);
    });
  }

  /// Returns a live stream of all SignMsg events emitted by this contract.
  Stream<SignMsg> signMsgEvents(
      {_i1.BlockNum? fromBlock, _i1.BlockNum? toBlock}) {
    final event = self.event('SignMsg');
    final filter = _i1.FilterOptions.events(
        contract: self, event: event, fromBlock: fromBlock, toBlock: toBlock);
    return client.events(filter).map((_i1.FilterEvent result) {
      final decoded = event.decodeResults(result.topics!, result.data!);
      return SignMsg(decoded);
    });
  }
}

class GetCurrentEIP4337Manager {
  GetCurrentEIP4337Manager(List<dynamic> response)
      : prev = (response[0] as _i1.EthereumAddress),
        manager = (response[1] as _i1.EthereumAddress);

  final _i1.EthereumAddress prev;

  final _i1.EthereumAddress manager;
}

class GetModulesPaginated {
  GetModulesPaginated(List<dynamic> response)
      : array = (response[0] as List<dynamic>).cast<_i1.EthereumAddress>(),
        next = (response[1] as _i1.EthereumAddress);

  final List<_i1.EthereumAddress> array;

  final _i1.EthereumAddress next;
}

class AddedOwner {
  AddedOwner(List<dynamic> response)
      : owner = (response[0] as _i1.EthereumAddress);

  final _i1.EthereumAddress owner;
}

class ApproveHash {
  ApproveHash(List<dynamic> response)
      : approvedHash = (response[0] as _i2.Uint8List),
        owner = (response[1] as _i1.EthereumAddress);

  final _i2.Uint8List approvedHash;

  final _i1.EthereumAddress owner;
}

class ChangedFallbackHandler {
  ChangedFallbackHandler(List<dynamic> response)
      : handler = (response[0] as _i1.EthereumAddress);

  final _i1.EthereumAddress handler;
}

class ChangedGuard {
  ChangedGuard(List<dynamic> response)
      : guard = (response[0] as _i1.EthereumAddress);

  final _i1.EthereumAddress guard;
}

class ChangedThreshold {
  ChangedThreshold(List<dynamic> response)
      : threshold = (response[0] as BigInt);

  final BigInt threshold;
}

class DisabledModule {
  DisabledModule(List<dynamic> response)
      : module = (response[0] as _i1.EthereumAddress);

  final _i1.EthereumAddress module;
}

class EnabledModule {
  EnabledModule(List<dynamic> response)
      : module = (response[0] as _i1.EthereumAddress);

  final _i1.EthereumAddress module;
}

class ExecutionFailure {
  ExecutionFailure(List<dynamic> response)
      : txHash = (response[0] as _i2.Uint8List),
        payment = (response[1] as BigInt);

  final _i2.Uint8List txHash;

  final BigInt payment;
}

class ExecutionFromModuleFailure {
  ExecutionFromModuleFailure(List<dynamic> response)
      : module = (response[0] as _i1.EthereumAddress);

  final _i1.EthereumAddress module;
}

class ExecutionFromModuleSuccess {
  ExecutionFromModuleSuccess(List<dynamic> response)
      : module = (response[0] as _i1.EthereumAddress);

  final _i1.EthereumAddress module;
}

class ExecutionSuccess {
  ExecutionSuccess(List<dynamic> response)
      : txHash = (response[0] as _i2.Uint8List),
        payment = (response[1] as BigInt);

  final _i2.Uint8List txHash;

  final BigInt payment;
}

class RemovedOwner {
  RemovedOwner(List<dynamic> response)
      : owner = (response[0] as _i1.EthereumAddress);

  final _i1.EthereumAddress owner;
}

class SafeReceived {
  SafeReceived(List<dynamic> response)
      : sender = (response[0] as _i1.EthereumAddress),
        value = (response[1] as BigInt);

  final _i1.EthereumAddress sender;

  final BigInt value;
}

class SafeSetup {
  SafeSetup(List<dynamic> response)
      : initiator = (response[0] as _i1.EthereumAddress),
        owners = (response[1] as List<dynamic>).cast<_i1.EthereumAddress>(),
        threshold = (response[2] as BigInt),
        initializer = (response[3] as _i1.EthereumAddress),
        fallbackHandler = (response[4] as _i1.EthereumAddress);

  final _i1.EthereumAddress initiator;

  final List<_i1.EthereumAddress> owners;

  final BigInt threshold;

  final _i1.EthereumAddress initializer;

  final _i1.EthereumAddress fallbackHandler;
}

class SignMsg {
  SignMsg(List<dynamic> response) : msgHash = (response[0] as _i2.Uint8List);

  final _i2.Uint8List msgHash;
}
